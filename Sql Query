-- 0th query 
SELECT *
 FROM tutorial.us_housing_units;
 
-- 1st query querying only selected column
SELECT year, month, west
 FROM tutorial.us_housing_units;
 
-- 2nd querying all the column 
SELECT *
 FROM tutorial.us_housing_units;
 
-- 3rd use of limit 
SELECT *
FROM tutorial.us_housing_units 
LIMIT 10; 

-- 4th use of the where clause
SELECT *
FROM tutorial.us_housing_units
WHERE month = 1;

-- 5th Comparision operator on numerical data 
 -- equal to the operator   
  SELECT * 
  FROM tutorial.us_housing_units
  WHERE year = 1968;

  -- Not equal ( <> / != ) to operator 
  SELECT * 
  FROM tutorial.us_housing_units
  WHERE year <> 1968; 
 
 -- Greater than the operator 
 SELECT *
 FROM tutorial.us_housing_units
 WHERE month > 7;
 
 -- smaller than the operator 
 SELECT * 
 FROM tutorial.us_housing_units
 WHERE month < 1970;
 
 -- greater than equal to 
 SELECT * 
 FROM tutorial.us_housing_units
 WHERE year >= 1971;
 
 -- less than equal to 
 SELECT *
 FROM tutorial.us_housing_units
 WHERE year <= 1970;
 
-- Comparison operator on the non-numerical data 
 -- equal to the operator 
   SELECT *
   FROM tutorial.us_housing_units
   WHERE month_name > 'January'; /* note  here we are using single quotes in the string value*/
 
 -- does not equal February 
   SELECT * 
   FROM tutorial.us_housing_units
   WHERE month_name != 'February';
 
-- Arithmetic operator ( + )in SQL
 SELECT year, month, month_name, south, west, south + west as "south_west" 
 FROM tutorial.us_housing_units;
 
-- Arithmetic operator ( - ) in SQL 
 SELECT year, month, month_name, south, 
 west, south-west  as "south_west_min"
 FROM tutorial.us_housing_units;
 
-- arithmetic operator ( * ) in SQL 
 SELECT year, month, south, west, south * west as "mul_south_west"
 FROM tutorial.us_housing_units;
 
-- arithmetic operator ( / ) in SQL 
 SELECT year, month, south, west, (south/west) as "div_south_west"
 FROM tutorial.us_housing_units;

-- arithmetic operator ( / ) in SQL
  SELECT year, month, south, west, (south/west)/2 as "avg_south_west"
  FROM tutorial.us_housing_units;
 
-- SQL logical operator ( logical operator helps you to apply multiple conditions)
 -- Here we will we using a different dataset 
  SELECT * 
  FROM tutorial.billboard_top_100_year_end; 
  
  -- let's see the dataset in different manner
  SELECT *
  FROM tutorial.billboard_top_100_year_end
  ORDER BY year DESC, year_rank
 
 -- Like operator -- allows you to match similar values, instead of exact values.
  -- Q - find all the group names where the fist word is Snoop after that it could be anything.
    --  The per cent sign (%) represents zero, one, or multiple characters
    -- The underscore sign (_) represents one, single character
  SELECT * 
  FROM tutorial.billboard_top_100_year_end
  WHERE group_name LIKE 'Snoop%';
  
  -- Q - find all the group name where the first word is dr and the last 2 words is ke after that it could be anything.
  SELECT * 
  FROM tutorial.billboard_top_100_year_end 
  WHERE group_name ILIKE 'dr_ke'; /* Note ILIKE is for postgre sql only */
  
-- SQL in operator
   -- The IN operator allows you to specify multiple values in a WHERE clause.
   -- The IN operator is a shorthand for multiple OR conditions.
   -- Q - find all the values where year_rank maybe 1, 2, 3
     SELECT *
     FROM tutorial.billboard_top_100_year_end
     where year_rank IN (1,2,3);

-- SQL in operator 
 -- Q - Find all the values where artist names 'Taylor Swift'  'Usher' 'Ludacris' 
  SELECT * 
  FROM tutorial.billboard_top_100_year_end
  WHERE artist IN ('Taylor Swift', 'Usher', 'Ludacris');
  
-- Q - Write a query that shows all of the entries for Elvis and M.C. Hammer. 
  SELECT * 
  FROM tutorial.billboard_top_100_year_end
  WHERE group_name IN ('Elvis Presley', 'M.C.Hammer', 'Hammer');
  
-- sql between operator
  -- Find all the records for ranks 5 to 10
  SELECT * 
  FROM tutorial.billboard_top_100_year_end
  WHERE year_rank BETWEEN 5 AND 10;
  
  -- Q - Write a query that shows all top 100 songs from January 1, 1985 through December 31, 1990.
  SELECT * 
  FROM tutorial.billboard_top_100_year_end
  WHERE year between 1985 and 1990;
  
-- the IS NULL operator 
 -- IS NULL is a logical operator in SQL that allows you to exclude rows with missing data from your results. 

-- Q - select all the data where the artist name is null
 SELECT * 
 FROM tutorial.billboard_top_100_year_end
 WHERE artist IS NULL;
 
-- NOTE: WHERE artist = NULL will not work—you can't perform arithmetic on null values.
 SELECT * 
 FROM tutorial.billboard_top_100_year_end
 WHERE artist = NULL;  /* will not work—you can't perform arithmetic on null values. */
 
-- Write a query that shows all of the rows for which song_name is null.
 SELECT * 
 FROM tutorial.billboard_top_100_year_end
 WHERE song_name IS NULL;
 
-- The SQL AND operator
 -- AND is a logical operator in SQL that allows you to select only rows that satisfy two conditions.

-- Q - -- Write a query that shows all of the rows for which year = 2012 and year rank <=10.
  SELECT * 
  FROM tutorial.billboard_top_100_year_end
  WHERE year = 2012 and year_rank <=10;
 
-- Q - Write a query that surfaces all rows for top-10 hits for which Ludacris is part of the Group.
  SELECT *
  FROM tutorial.billboard_top_100_year_end
  WHERE group_name = 'Ludacris'
  LIMIT 10;
  
-- Q - Write a query that surfaces the top-ranked records in 1990, 2000, and 2010. 
  SELECT * 
  FROM tutorial.billboard_top_100_year_end
  WHERE year IN (1990, 2000, 2010) and year_rank = 1; 

-- Write a query that lists all songs from the 1960s with "love" in the title.
  SELECT * 
  FROM tutorial.billboard_top_100_year_end
  WHERE year = 1960 and song_name ilike '%love%';
   
-- THE SQL OR operator 
-- OR is a logical operator in SQL that allows you to select rows that satisfy either of two conditions.
 
-- Write a query list of all the records where year rank = 5 or the artist is Gotye
 SELECT *
 FROM tutorial.billboard_top_100_year_end
 WHERE year_rank = 5 or artist = 'Gotye'; 

-- write a query list all the record where year = 2013 and group name = macklemore or timberlake
 SELECT *
 FROM tutorial.billboard_top_100_year_end
 WHERE year = 2013 and ( group_name ILIKE '%macklemore%' or group_name ILIKE '%timberlake%'); 

--  Write a query that returns all rows for top-10 songs that featured either Katy Perry or Bon Jovi.
 SELECT *
 FROM tutorial.billboard_top_100_year_end
 WHERE year_rank <= 10 and ( artist ILike '%Katy Perry%' or artist ILIKE '%Bon Jovi%');

-- Write a query that returns all songs with titles that contain the word "California" in either the 1970s or 1990s.
 SELECT * 
 FROM tutorial.billboard_top_100_year_end
 WHERE song_name ILike '%california%' and ( year BETWEEN 1970  and 1979 or year BETWEEN 1990 and 1999 );
  
-- Write a query that lists all top-100 recordings that feature Dr Dre before 2001 or after 2009. 
 SELECT * 
 FROM tutorial.billboard_top_100_year_end
 WHERE artist ILike 'Dr. dre%' and (year < 2001 or year > 2009);
  
-- THE SQL NOT operator 
 -- this operator did the opposite of all the condition
 SELECT * 
 FROM tutorial.billboard_top_100_year_end
 WHERE year_rank NOT IN (2,3) ;
 
 -- Write a query in which year_rank is not 4
 SELECT * 
 FROM tutorial.billboard_top_100_year_end
 WHERE year_rank NOT In (4) ;
 
-- Write a query that returns all rows for songs that were on the charts in 2013 and do not contain the letter "a".
 SELECT * 
 FROM tutorial.billboard_top_100_year_end
 WHERE year = 2013 and song_name Not LIKE '%a';
 
-- Sorting data with SQL ORDER BY 
  SELECT *
  FROM tutorial.billboard_top_100_year_end
  ORDER BY artist;

-- Write a query to select all the records where year = 2013 and order by year rank 
  SELECT * 
  FROM tutorial.billboard_top_100_year_end
  ORDER By year_rank DESC;

-- Write the query that returns all the records where the year rank is less than 3 and order by year in desc then year_rank;
  SELECT *
  FROM tutorial.billboard_top_100_year_end
  WHERE year_rank <= 3
  ORDER BY year DESC, year_rank; /* here it will order by year in desc and then in that it will order by year rank asc */

--  let's do it in the opposite way 
  SELECT *
  FROM tutorial.billboard_top_100_year_end
  WHERE year_rank <= 3
  ORDER BY year_rank, year DESC;

-- Write a query that returns all rows from 2010 ordered by rank, with artists ordered alphabetically for each song.
  SELECT * 
  FROM tutorial.billboard_top_100_year_end
  WHERE year = 2010
  ORDER BY year_rank, artist;
  
-- Write a query that shows all rows for which T-Pain was a group member, ordered by rank on the charts, from lowest to highest rank (from 100 to 1).
  SELECT * 
  FROM tutorial.billboard_top_100_year_end
  WHERE group_name = 'T-Pain'
  ORDER BY year_rank desc;

-- Write a query that returns songs that ranked between 10 and 20 (inclusive) in 1993, 2003, or 2013. 
-- Order the results by year and rank, and leave a comment on each line of the WHERE clause to indicate what that line does
  SELECT * 
  FROM tutorial.billboard_top_100_year_end
  WHERE year_rank BETWEEN 10 and 20 and ( year in (1993,2003,2013)) /* here it will filter the data between 10 to 20 and by following in's years*/
  ORDER BY year, year_rank;


